import _extends from '@babel/runtime/helpers/esm/extends';
import * as THREE from 'three';
import * as React from 'react';
import { shaderMaterial } from './shaderMaterial.js';
import { extend, dispose, applyProps } from '@react-three/fiber';
import { toCreasedNormals } from 'three-stdlib';

const OutlinesMaterial = shaderMaterial({
  color: new THREE.Color('black'),
  opacity: 1,
  thickness: 0.05
}, `#include <common>
   #include <morphtarget_pars_vertex>
   #include <skinning_pars_vertex>
   uniform float thickness;
   void main() {
     #if defined (USE_SKINNING)
	   #include <beginnormal_vertex>
       #include <morphnormal_vertex>
       #include <skinbase_vertex>
       #include <skinnormal_vertex>
       #include <defaultnormal_vertex>
     #endif
     #include <begin_vertex>
	   #include <morphtarget_vertex>
	   #include <skinning_vertex>
     #include <project_vertex>
     vec3 newPosition = transformed + normal * thickness;
     gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0); 
   }`, `uniform vec3 color;
   uniform float opacity;
   void main(){
     gl_FragColor = vec4(color, opacity);
     #include <tonemapping_fragment>
     #include <${parseInt(THREE.REVISION.replace(/\D+/g, '')) >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>
   }`);
function Outlines({
  color = 'black',
  opacity = 1,
  transparent = false,
  thickness = 0.05,
  angle = Math.PI,
  ...props
}) {
  const ref = React.useRef(null);
  React.useMemo(() => extend({
    OutlinesMaterial
  }), []);
  React.useLayoutEffect(() => {
    const group = ref.current;
    const parent = group.parent;

    if (parent && parent.geometry) {
      let mesh;

      if (parent.skeleton) {
        mesh = new THREE.SkinnedMesh();
        mesh.material = new OutlinesMaterial({
          side: THREE.BackSide
        });
        mesh.bind(parent.skeleton, parent.bindMatrix);
        group.add(mesh);
      } else {
        mesh = new THREE.Mesh();
        mesh.material = new OutlinesMaterial({
          side: THREE.BackSide
        });
        group.add(mesh);
      }

      mesh.geometry = angle ? toCreasedNormals(parent.geometry, angle) : parent.geometry;
      return () => {
        dispose(mesh);
        group.clear();
      };
    }
  }, [angle]);
  React.useLayoutEffect(() => {
    const group = ref.current;
    const mesh = group.children[0];

    if (mesh) {
      applyProps(mesh.material, {
        transparent,
        thickness,
        color,
        opacity
      });
    }
  }, [angle, transparent, thickness, color, opacity]);
  return /*#__PURE__*/React.createElement("group", _extends({
    ref: ref
  }, props));
}

export { Outlines };
